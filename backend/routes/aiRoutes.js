// backend/routes/aiRoutes.js
import express from "express";
import protect from "../middleware/authMiddleware.js";
import MoodLog from "../models/MoodLog.js";
import AiAnalysis from "../models/AiAnalysis.js";
import AIRiskResult from "../models/AIRiskResult.js";
import OpenAI from "openai";
import { GoogleGenerativeAI } from "@google/generative-ai";

const router = express.Router();

/* -------------------------------------------------------------------------- */
/* ‚úÖ Utility: Initialize OpenAI + Gemini                                     */
/* -------------------------------------------------------------------------- */
const getOpenAIClient = () => {
  const key = process.env.OPENAI_API_KEY;
  if (!key) throw new Error("Missing OPENAI_API_KEY in .env");
  return new OpenAI({ apiKey: key });
};

const getGeminiClient = () => {
  const key = process.env.GEMINI_API_KEY;
  if (!key) throw new Error("Missing GEMINI_API_KEY in .env");
  return new GoogleGenerativeAI(key);
};

/* -------------------------------------------------------------------------- */
/* üß© Prompt Template                                                         */
/* -------------------------------------------------------------------------- */
const PROMPT_TEMPLATE = `
You are an AI mental wellness assistant for a youth-focused app called Healio.

Analyze the following user mood logs and detect early emotional changes or risk patterns.
Focus on *trends*, not just individual moods ‚Äî even mild shifts matter.

Each log includes:
- mood: one of ["Happy", "Neutral", "Sad", "Angry", "Tired"]
- factors: a list of relevant tags (e.g., "Work", "Health", "Friends")
- journal: short free-text describing their day
- createdAt: timestamp

---
üîç Your task:
1. Identify emotional trends in the last few days (e.g., improvement, decline, stress buildup).
2. Detect early risks (like stress, burnout, anxiety, sadness) ‚Äî even if mixed moods appear.
3. Quantify the overall balance of positive vs. negative moods.

---
üìä Respond strictly in valid JSON with this exact structure (no markdown, no explanations):

{
  "mindBalanceScore": number (0‚Äì100),
  "progressMilestone": number (0‚Äì1),
  "weeklyMoods": [1‚Äì5],
  "risks": [
    {
      "category": "Stress | Depression | Anxiety | Burnout | Stable",
      "score": number (0‚Äì100),
      "message": "Short reason ‚Äî based on repeated low moods, tiredness, anger, or negative factors"
    }
  ],
  "suggestion": "Friendly motivational message (1‚Äì2 sentences). Youthful, empathetic tone."
}
`;

/* -------------------------------------------------------------------------- */
/* ‚úÖ Route: Get AI Analysis History                                          */
/* -------------------------------------------------------------------------- */
router.get("/risk-history", protect, async (req, res) => {
  try {
    const userId = req.user._id;
    const history = await AiAnalysis.find({ user: userId }).sort({ createdAt: -1 });
    res.json(history);
  } catch (err) {
    console.error("‚ùå Error fetching AI analysis history:", err);
    res.status(500).json({ message: "Failed to fetch AI analysis history" });
  }
});

/* -------------------------------------------------------------------------- */
/* ‚úÖ Route: Perform AI Risk Analysis (Hybrid Fail-over)                      */
/* -------------------------------------------------------------------------- */
router.post("/risk-analysis", protect, async (req, res) => {
  try {
    const userId = req.user._id;

    // üîπ 1Ô∏è‚É£ Fetch user mood logs (last 30 days)
    const moodLogs = await MoodLog.find({
      user: userId,
      createdAt: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) },
    }).sort({ createdAt: -1 });

    if (moodLogs.length === 0) {
      return res.json({ message: "No recent mood logs to analyze." });
    }

    // üîπ 2Ô∏è‚É£ Build input prompt
    const logsText = moodLogs
      .map(
        (l) =>
          `Mood: ${l.mood}, Factors: ${l.factors.join(", ")}, Journal: ${l.journal || "N/A"}`
      )
      .join("\n");
    const fullPrompt = `${PROMPT_TEMPLATE}\nLogs:\n${logsText}`;

    let aiOutput;
    let aiSource = "OpenAI";

    // üîπ 3Ô∏è‚É£ Try OpenAI first
    try {
      const openai = getOpenAIClient();
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: fullPrompt }],
        response_format: { type: "json_object" },
      });

      const text = completion.choices[0].message.content?.trim() || "{}";
      aiOutput = JSON.parse(text);
      console.log("‚úÖ OpenAI response successful");
    } catch (err) {
      // ‚ö†Ô∏è If OpenAI fails ‚Üí switch to Gemini
      console.warn("‚ö†Ô∏è OpenAI failed:", err.message || err);
      aiSource = "Gemini";
      try {
        const gemini = getGeminiClient();
        const model = gemini.getGenerativeModel({ model: "gemini-2.0-flash" });
        const result = await model.generateContent(fullPrompt);

        // ü©π Fix: sanitize Gemini output to remove ```json fences
        const text = result.response.text();
        const cleanText = text
          .replace(/```json/gi, "")
          .replace(/```/g, "")
          .trim();

        aiOutput = JSON.parse(cleanText);
        console.log("‚úÖ Gemini fallback response successful");
      } catch (gErr) {
        console.error("‚ùå Gemini also failed:", gErr.message || gErr);
        throw new Error("Both AI models failed to generate a response");
      }
    }

    // üîπ 4Ô∏è‚É£ Validate and normalize output
    if (!aiOutput.mindBalanceScore) aiOutput.mindBalanceScore = 60;
    if (!aiOutput.risks || !Array.isArray(aiOutput.risks)) {
      aiOutput.risks = [
        { category: "Stable", score: 10, message: "Default stable output." },
      ];
    }
    if (!aiOutput.suggestion) {
      aiOutput.suggestion = "Keep focusing on small wins and self-care üåø";
    }

    // üîπ 5Ô∏è‚É£ Save detailed and summary records
    const saved = await AiAnalysis.create({ user: userId, ...aiOutput });
    await AIRiskResult.create({
      user: userId,
      wellnessIndex: aiOutput.mindBalanceScore,
      riskLevel: aiOutput.risks[0].category.toUpperCase(),
      summary: aiOutput.risks[0].message,
      suggestions: [aiOutput.suggestion],
    });

    // üîπ 6Ô∏è‚É£ Respond to frontend
    res.json({ ...saved.toObject(), source: aiSource });
  } catch (err) {
    console.error("‚ùå AI risk analysis failed:", err.message || err);
    res.status(500).json({ message: "AI risk analysis failed" });
  }
});

export default router;
